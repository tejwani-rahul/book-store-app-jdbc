-- User Table
CREATE TABLE User (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Role ENUM ('Customer', 'Admin')
);

-- Book Table
CREATE TABLE Book (
    BookID INT PRIMARY KEY AUTO_INCREMENT,
	ISBN VARCHAR(20) UNIQUE NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Author VARCHAR(100) NOT NULL,
    Publisher VARCHAR(100),
    PublishDate DATE,
    Price DECIMAL(10, 2) NOT NULL,
    QuantityAvailable INT NOT NULL,
	ImageURL VARCHAR(255),
    Description TEXT
);

-- Shopping Cart Table
CREATE TABLE ShoppingCart (
    CartID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    BookID INT,
    Quantity INT,
    Statues Enum('Active','InActive') Defualt('Active'),
    FOREIGN KEY (UserID) REFERENCES User(UserID),
    FOREIGN KEY (BookID) REFERENCES Book(BookID)
);

-- Order Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    TotalPrice DECIMAL(10, 2),
    ShipmentStatus ENUM ('Pending', 'Shipped', 'Delivered') DEFAULT 'Pending',
    FOREIGN KEY (UserID) REFERENCES User(UserID)
);

-- Order Details Table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    BookID INT,
    Quantity INT,
    Price DECIMAL(10, 2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (BookID) REFERENCES Book(BookID)
);

-- Payment Table
CREATE TABLE Payment (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    OrderID INT,
    PaymentDate DATE,
    PaymentMethod VARCHAR(50),
    AmountPaid DECIMAL(10, 2),
    FOREIGN KEY (UserID) REFERENCES User(UserID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Shipment Table
CREATE TABLE Shipment (
    ShipmentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    ShipmentDate DATE,
    TrackingNumber VARCHAR(50),
    DeliveryAddress VARCHAR(255),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE Card(
    CardID INT PRIMARY KEY AUTO_INCREMENT,
 
    PaymentID INT,
    CardNumber VARCHAR(16) NOT NULL,
    ExpiryDate DATE NOT NULL,
    CVV VARCHAR(4) NOT NULL, 
       FOREIGN KEY (PaymentID) REFERENCES payment(PaymentID)
  );
